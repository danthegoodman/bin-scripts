#!/usr/bin/env node
"use strict";
const HOME = process.env['HOME'];
const TOKEN = require('fs').readFileSync(`${HOME}/.ssh/tokens/github`, 'utf8').trim();
const cp = require('child_process');
const https = require('https');

console.log("Finding local repos");
let localRepos = findLocalRepos();

console.log("Finding remote repos");
findGithubRepos().then(remoteRepos=>{
  let missing = remoteRepos.filter(r=> !localRepos.includes(r));

  if(missing.length === 0){
    console.log("All remote repos are also local!")
  } else {
    console.log("You are missing the following repos:")
    for(let r of missing){
      console.log(r)
    }
  }
}).catch(console.error);



function findLocalRepos(){
  let listOut = cp.execSync("python3 ~/prog/equis/lib/cmd-list.py --all", {encoding: 'utf8'})
  let dirs = listOut.trim().split('\n')
  return dirs
      .map(d=> cp.execSync("git remote get-url origin || :", {stdio:'pipe',encoding: 'utf8', cwd: d}).trim())
      .filter(r=> /VeracityInnovations/.test(r));
}

function findGithubRepos(page, lastResult){
  if(!page) page = 1;
  if(!lastResult) lastResult = [];
  return findGithubReposPage(page).then(results=>{
    if(results.length === 0) return lastResult;
    let sshUrls = results.map(r=> r.ssh_url);
    return findGithubRepos(page+1, lastResult.concat(sshUrls));
  });
}

function findGithubReposPage(page){
  return new Promise(function(resolve, reject){
    let opts = {
      protocol: 'https:',
      hostname: 'api.github.com',
      path: `/orgs/VeracityInnovations/repos?page=${page}`,
      headers: {
        'User-Agent': 'none',
        Authorization: `token ${TOKEN}`
      },
    };
    https.get(opts, res=>{
      if(res.statusCode !== 200) return reject(`invalid status code: ${res.statusCode}`);
      let result = "";
      res.on('data', (d) => result += d);
      res.on('end', ()=> resolve(JSON.parse(result)));
      res.on('error', reject);
    }).on('error', reject);
  });
}

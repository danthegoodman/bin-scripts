#!/usr/bin/env python
import argparse, sys, subprocess, string, signal

def main():
  signal.signal(signal.SIGINT, sigintHandler)

  args = parseArguments()
  cmdArgs = ['ping', '-i', args.interval]
  if args.onlyOne: 
    cmdArgs.append('-c')
    cmdArgs.append('1')
  cmdArgs.append(args.host)

  proc = subprocess.Popen(jstatArgs, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

  checkStartup(proc)
  consumeOutput(proc)

def parseArguments():
  parser = argparse.ArgumentParser(description='Visualize ping time')
  parser.add_argument('host',
                     help='Ping host')
  parser.add_argument('-i', '--interval', dest='interval', default='1',
                     help='Sampling interval in seconds, may be fractional; defaults to 1')
  parser.add_argument('-1', '--one', dest='onlyOne', action='store_true',
                     help='Report only once and quit')
  return parser.parse_args()

def checkStartup(p):
  line = p.stdout.readline()
  retcode = p.poll()
  if not line.startswith('PING') or retcode is not None:
    sys.stdout.write(line)
    sys.exit(1)

def consumeOutput(p):
  while True:
    line = p.stdout.readline()
    try:
      time = line[string.rindex(line, '=')+1:string.rindex(line, ' ms')]
      graphTime(float(time));
    except ValueError:
      sys.stdout.write(line)

    retcode = p.poll()
    if retcode is not None:
      break

def graphTime(time):
  uLen = int(round(time/5))
  tLen = 100-uLen
  disp = "%.2f ms" % (time)

  sys.stdout.write('\033[90;47m')
  sys.stdout.write(' '.ljust(uLen))
  sys.stdout.write('\033[37;100m')
  sys.stdout.write(disp.rjust(tLen))
  sys.stdout.write('\033[0m\n')

def sigintHandler(signum, frame):
  sys.exit(1)

if __name__ == "__main__": 
  main()

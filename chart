#!/bin/zsh

# Takes a series of numbers, builds a 2D graph with gnu plot, then
#	spits it out in the terminal using an iterm2 escape code.
#
# The graph is adaptive based on the first line of the input.

cat - > /tmp/last_chart_data
firstLine="$(head -n 1 /tmp/last_chart_data)"
colCount="$(awk '{print NF; exit}' <<< "$firstLine")"

scriptLines=(
  'set term png size 1200,300;'
  'set key left;'
  'set border lc rgbcolor "#888888";'
  'set autoscale noextend;'
)

if [[ "$colCount" -eq 1 ]]; then
  scriptLines+=("plot \"/tmp/last_chart_data\" using (\$0):1 with lines")
else
  if [[ "$firstLine" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2} ]]; then
    scriptLines+=('set xdata time;')
    scriptLines+=('set timefmt "%Y-%m-%dT%H:%M:%SZ";')
  fi

  plotParts=("plot \"/tmp/last_chart_data\" using 1:2 with lines title \"${1:-data}\"")
  for (( c=2; c<$colCount; c++ ))
  do
    plotParts=(" \"\" using 1:$((c+1)) with linespoints "${argv[$c]:-data $c})
  done
  scriptLines+=("${(pj:,:)plotParts}")
fi

printf "\033]1337;File=inline=1:$(gnuplot -e "${(F)scriptLines}" | base64)\a\n"
